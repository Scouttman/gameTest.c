#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

#include "Game.h"
#include "mechanicalTurk.h"

int tmain(int argc, _TCHAR* argv[])
{
    /*Scott's Test*/
    /* If these test don't work comment them out */
    action  a;
	a.actionCode = 1;
	//a.destination = NULL;
	a.disciplineFrom = 1;
	a.disciplineTo = 1;

	Game game = newGame(DEFAULT_DISCIPLINES, DEFAULT_DICE);
	ASSERT(game != Null);

	ASSERT(getDiscipline(game, 6) == STUDENT_BPS);

	ASSERT(getDiceValue(game, 5) == 6);

	ASSERT(getMostARCs(game) == NO_ONE);
	makeAction(game, OBTAIN_ARC);
	ASSERT(getMostARCs(game) == UNI_A);

	ASSERT(getMostPublications(game) == NO_ONE);
	makeAction(game, OBTAIN_PUBLICATION);
	ASSERT(getMostPublications(game) == UNI_A);

	ASSERT(getTurnNumber(game) == 0);
	throwDice();
	ASSERT(getTurnNumber(game) == 5);

	ASSERT(getTurnNumber(game) == 2);
	throwDice();
	ASSERT(getTurnNumber(game) == 3);

	path noWereSet = "BBR";
	ASSERT(getCampus(game, noWereSet) == VACANT_VERTEX); 

	// path toEdge = "???";
	// ASSERT(getARC(game, toEdge) == VACANT_ARC);

	assert(isLegalAction(game, PASS) == 0);
	assert(isLegalAction(game, OBTAIN_ARC) == 1);

	assert(getKPIpoints(game, UNI_A) == 1);
	assert(getKPIpoints(game, UNI_B) == 0)

	assert(getARCs(g, UNI_A == 1);
	assert(getARCs(g, UNI_B == 0);
	assert(getGO8s(g, UNI_B) == 0);
	makeAction(game, OBTAIN_PUBLICATION);
	assert(getGO8s(g, UNI_B) == 1);

	assert(getCampuses(game, UNI_A) == 2);
	makeAction(game, BUILD_CAMPUS);
	assert(getCampuses(game, UNI_B) == 3);
	
	assert(getIPs(game, UNI_A) == 0);
	makeAction(game, OBTAIN_IP_PATENT);
	assert(getIPs(game, UNI_B) == 1);

	assert(getPublications(game, UNI_A) == 0);
	makeAction(game, OBTAIN_PUBLICATION);
	assert(getPublications(game, UNI_B) == 1);

	//assert(getStudents(game, UNI_A, STUDENT_MMONEY) == ???? );

	//assert(getExchangeRate(game, UNI_A, STUDENT_MJ, STUDENT_MTV) == 4?);

	disposeGame(game);
	assert(game == Null);

    
    /*George's Test*/

    if (getTurnNumber (Game g) == 0){
        ASSERT(getWhoseTurn (Game g) == UNI_A);
        ASSERT(getKPIpoints (Game g, UNI_A) == 20);
        ASSERT(getMostARCs (Game g) == NO_ONE);
        ASSERT(getMostPublications (Game g) == NO_ONE);
        ASSERT(getCampuses (Game g, UNI_A) == 2);
        ASSERT(getARCs (Game g, UNI_A) == 2);
        ASSERT(getGO8s (Game g, UNI_A) == 0);
        ASSERT(getPublications (Game g, UNI_A) == 0);
        ASSERT(getIPs (Game g, UNI_A) == 0);
    }
}
